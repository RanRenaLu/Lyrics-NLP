geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 10, label = genre, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + ylim(-20, 150)
ggplot(lyrics_genre, aes(x = as.factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 10, label = genre, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0)
ggplot(lyrics_genre, aes(x = as.factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 100, label = genre, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0)
ggplot(lyrics_genre, aes(x = as.factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 100, label = genre, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
lyrics_genre
ggplot(lyrics_genre, aes(x = as.factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 100, label = genre, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 100, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
angle =  (90 - 360 * (1:5 - 0.5) /5)
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 100, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 10000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 100000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = angle, inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = (ifelse(angle < -90, angle + 180, angle) ), inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal()
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = (ifelse(angle < -90, angle + 180, angle) ), inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-4,4), "in"))
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = (ifelse(angle < -90, angle + 180, angle) ), inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank())
ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = (ifelse(angle < -90, angle + 180, angle) ), inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g1 <- ggplot(data = dt_lyrics) + geom_mosaic(aes(x = product(genre, time), fill = genre), na.rm = TRUE) + theme_light() +  theme(axis.text.x=element_text(angle = 90, hjust = 0), plot.title = element_text(hjust = 0.5)) +
labs(x = "Time", y = "Genre", title = "Mosaic Plot for Genre against Time")
g1
lyrics_time <- dt_lyrics %>% select(id, time) %>% group_by(time) %>% summarise(count_time = n()) %>% na.omit()
lyrics_genre <- dt_lyrics %>% select(id, genre) %>% group_by(genre) %>% summarise(count_genre = n()) %>% na.omit()
angle =  (90 - 360 * (1:5 - 0.5) /5)
g2 <- ggplot(lyrics_time, aes(x = as.factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)), color = "black", alpha = 0.6, size = 3, angle = (ifelse(angle < -90, angle + 180, angle) ), inherit.aes = FALSE ) + coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g2
g1 <- ggplot(data = dt_lyrics) + geom_mosaic(aes(x = product(genre, time), fill = genre), na.rm = TRUE) + theme_light() +  theme(axis.text.x=element_text(angle = 90, hjust = 0), plot.title = element_text(hjust = 0.5)) +
labs(x = "Time", y = "Genre", title = "Mosaic Plot for Genre against Time") + theme(panel.grid = element_blank())
g1
g2
word.count <- word_count(dt_lyrics$stemmedwords)
View(nrc_sentiment)
lyrics_sentiment <- rbind(dt_lyrics,nrc_sentiment)
lyrics_sentiment <- cbind(dt_lyrics,nrc_sentiment)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = time)) +
geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ time, ncol = 2, scales = "free_x")
View(out)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
lyrics_sentiment <- cbind(dt_lyrics,nrc_sentiment) %>% select(-lyrics, -stemmedwords)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
View(by_sentiment)
View(nrc_sentiment)
View(lyrics_sentiment)
?geom_bar
?facet_wrap
time_plot <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = time)) + geom_bar(alpha = 0.5) + facet_wrap(~ time, ncol = 2, scales = "free_x")
time_plot
time_plot <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = time)) + geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ time, ncol = 2, scales = "free_x")
time_plot
View(out)
max(nrc_sentiment$positive - nrc_sentiment$negative)
min(nrc_sentiment$positive - nrc_sentiment$negative)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% max(sentiment)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% select(sentiment) %>% max()
lyrics_sentiment %>% group_by(time)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% select(sentiment)
View(lyrics_sentiment)
lyrics_sentiment %>% group_by(time)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
ka <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative)
View(ka)
ka <- lyrics_sentiment %>% group_by(genre) %>% mutate(sentiment = positive - negative)
View(ka)
time_plot <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = time)) + geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ time, ncol = 2, scales = "free_x") + ylim(-80,50)
genre_plot <- lyrics_sentiment %>% group_by(genre) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = genre)) + geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ genre, ncol = 2, scales = "free_x") + ylim(-80,50)
View(by_sentiment)
View(out)
out <- with(dt_lyrics, sentiment_by(stemmedwords, list(genre, time)))
plot(out)
View(out)
plot(out[time=="2000s"])
write_csv()
?write_csv()
write.csv(out, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
plot(out_time)
plot(out_genre)
plot(out_genre)
out_genre <- with(dt_lyrics, sentiment_by(stemmedwords, list(genre)))
out_genre <- with(dt_lyrics, sentiment_by(stemmedwords, list(genre)))
#aggregate the sentiment analysis by grouping variables use sentiment_by
# out <- with(dt_lyrics[!is.na(dt_lyrics$time),], sentiment_by(stemmedwords, list(genre, time)))
# write.csv(out, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
out <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
plot(out[time=="2000s"])
2+2
#aggregate the sentiment analysis by grouping variables use sentiment_by
# out <- with(dt_lyrics[!is.na(dt_lyrics$time),], sentiment_by(stemmedwords, list(genre, time)))
# write.csv(out, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
# out_time <- with(dt_lyrics, sentiment_by(stemmedwords, list(time)))
write.csv(out_time, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_time.csv")
#aggregate the sentiment analysis by grouping variables use sentiment_by
# out <- with(dt_lyrics[!is.na(dt_lyrics$time),], sentiment_by(stemmedwords, list(genre, time)))
# write.csv(out, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
# out_time <- with(dt_lyrics, sentiment_by(stemmedwords, list(time)))
# write.csv(out_time, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_time.csv")
# out_genre <- with(dt_lyrics, sentiment_by(stemmedwords, list(genre)))
write.csv(out_time, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_genre.csv")
View(lyrics_genre)
View(lyrics_genre)
as.factor(1:12)
factor(1:12)
g1 <- ggplot(lyrics_time, aes(x = factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)),
color = "black", angle = (ifelse(angle < -90, angle + 180, angle)), size = 4,alpha = 0.5, inherit.aes = FALSE ) +
coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g1
angle2 <-  (90 - 360 * (1:12 - 0.5) /12)
g2 <- ggplot(lyrics_genre, aes(x = factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 1000, label = genre,
hjust = ifelse(angle2 < -90, 1, 0)),
angle = (ifelse(angle2 < -90, angle2 + 180, angle2) ), inherit.aes = FALSE,
color = "black", size = 4,alpha = 0.5) +coord_polar(start = 0) +theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g3 <- ggplot(data = dt_lyrics) + geom_mosaic(aes(x = product(genre, time), fill = genre), na.rm = TRUE) + theme_light() +  theme(axis.text.x=element_text(angle = 90, hjust = 0), plot.title = element_text(hjust = 0.5)) +
labs(x = "Time", y = "Genre", title = "Mosaic Plot for Genre against Time") + theme(panel.grid = element_blank())
g1
g1
g2
lyrics_time <- dt_lyrics %>% select(id, time) %>% group_by(time) %>% summarise(count_time = n()) %>% na.omit() %>% arrange(count_time)
lyrics_genre <- dt_lyrics %>% select(id, genre) %>% group_by(genre) %>% summarise(count_genre = n()) %>% na.omit() %>% arrange(count_genre)
angle <-  (90 - 360 * (1:5 - 0.5) /5)
g1 <- ggplot(lyrics_time, aes(x = factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)),
color = "black", angle = (ifelse(angle < -90, angle + 180, angle)), size = 4,alpha = 0.5, inherit.aes = FALSE ) +
coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g1
lyrics_genre <- dt_lyrics %>% select(id, genre) %>% group_by(genre) %>% summarise(count_genre = n()) %>% na.omit() %>% arrange(count_genre)
angle <-  (90 - 360 * (1:5 - 0.5) /5)
g1 <- ggplot(lyrics_time, aes(x = factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)),
color = "black", angle = (ifelse(angle < -90, angle + 180, angle)), size = 4,alpha = 0.5, inherit.aes = FALSE ) +
coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
lyrics_time <- dt_lyrics %>% select(id, time) %>% group_by(time) %>% summarise(count_time = n()) %>% na.omit() %>% arrange(count_time)
lyrics_genre <- dt_lyrics %>% select(id, genre) %>% group_by(genre) %>% summarise(count_genre = n()) %>% na.omit() %>% arrange(count_genre)
angle <-  (90 - 360 * (1:5 - 0.5) /5)
g1 <- ggplot(lyrics_time, aes(x = factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)),
color = "black", angle = (ifelse(angle < -90, angle + 180, angle)), size = 4,alpha = 0.5, inherit.aes = FALSE ) +
coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g1
angle2 <-  (90 - 360 * (1:12 - 0.5) /12)
g2 <- ggplot(lyrics_genre, aes(x = factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 1000, label = genre,
hjust = ifelse(angle2 < -90, 1, 0)),
angle = (ifelse(angle2 < -90, angle2 + 180, angle2) ), inherit.aes = FALSE,
color = "black", size = 4,alpha = 0.5) +coord_polar(start = 0) +theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
g2
g3 <- ggplot(data = dt_lyrics) + geom_mosaic(aes(x = product(genre, time), fill = genre), na.rm = TRUE) + theme_light() +  theme(axis.text.x=element_text(angle = 90, hjust = 0), plot.title = element_text(hjust = 0.5)) +
labs(x = "Time", y = "Genre", title = "Mosaic Plot for Genre against Time") + theme(panel.grid = element_blank())
g3
write.csv(nrc_sentiment,"~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/nrc_sentiment.csv")
lyrics_sentiment <- cbind(dt_lyrics,nrc_sentiment) %>% select(-lyrics, -stemmedwords)
par(mfrow = c(2,1))
g1
g2
shinyApp(ui, server)
shinyApp(ui, server)
time_plot <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = time)) + geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ time, ncol = 2, scales = "free_x") + ylim(-80,50)
genre_plot <- lyrics_sentiment %>% group_by(genre) %>% mutate(sentiment = positive - negative) %>% ggplot(aes(song, sentiment, fill = genre)) + geom_bar(alpha = 0.5, stat = "identity") + facet_wrap(~ genre, ncol = 2, scales = "free_x") + ylim(-80,50)
time_plot
time_plot <- lyrics_sentiment %>% group_by(time) %>% mutate(sentiment = positive - negative) %>%
ggplot(aes(song, sentiment, fill = time)) + geom_bar(alpha = 0.5, stat = "identity") +
facet_wrap(~ time, ncol = 2, scales = "free_x") + ylim(-80,50) + theme_light() +
theme(axis.text.x = element_blank(), axis.title = element_blank(), panel.grid = element_blank())
genre_plot <- lyrics_sentiment %>% group_by(genre) %>% mutate(sentiment = positive - negative) %>%
ggplot(aes(song, sentiment, fill = genre)) + geom_bar(alpha = 0.5, stat = "identity") +
facet_wrap(~ genre, ncol = 3, scales = "free_x") + ylim(-80,50) + theme_light() +
theme(axis.text.x = element_blank(), axis.title = element_blank(), panel.grid = element_blank())
time_plot
genre_plot
names(nrc_sentiment)
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive))
View(sentiment_counts)
library(dplyr)
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "genre", value = "counts")
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive))
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "genre", value = "counts", ends_with("_counts"))
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "genre", value = "counts", -genre)
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive))
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre)
ggplot(aes(sentiment_counts, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE)
ggplot(aes(sentiment_counts, counts, fill = -counts))
sentiment_counts %>% ggplot(aes(sentiment_counts, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE)
sentiment_counts %>% group_by(genre) %>% ggplot(aes(sentiment_counts, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE)
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE)
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE) + coord_flip()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip()
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time)
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip()
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time) %>% drop_na()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip()
\newline
Music has always been a very important part of our lives, and we can easily fall in love with songs without knowing the lyrics. However, a well-written lyrics should always be adored as it is a primary tool for the listeners to connect with the songwriter. Being able to understand the words of the lyrics, we can access to what is in their mind. It is so intuitive, and we do not need to be trained to read it. Then, what can lyrics tell us? In this context, we will analyze the lyrics of a large set of lyrics and discover some potential information through data visualization.
angle2 <-  (90 - 360 * (1:12 - 0.5) /12)
g2 <- ggplot(lyrics_genre, aes(x = factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 1000, label = genre,
hjust = ifelse(angle2 < -90, 1, 0)),
angle = (ifelse(angle2 < -90, angle2 + 180, angle2) ), inherit.aes = FALSE,
color = "black", size = 4,alpha = 0.5) +coord_polar(start = 0) +theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Genre")
par(mfrow = c(2,1))
g1
g2
par(mfrow = c(1,2))
g1
g2
par(mfrow = c(1,2))
ggplot(lyrics_time, aes(x = factor(1:5), y = count_time)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_time, aes(x = 1:5, y = count_time + 1000, label = time, hjust = ifelse(angle < -90, 1, 0)),
color = "black", angle = (ifelse(angle < -90, angle + 180, angle)), size = 4,alpha = 0.5, inherit.aes = FALSE ) +
coord_polar(start = 0) + theme_minimal() + theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Decades")
ggplot(lyrics_genre, aes(x = factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 1000, label = genre,
hjust = ifelse(angle2 < -90, 1, 0)),
angle = (ifelse(angle2 < -90, angle2 + 180, angle2) ), inherit.aes = FALSE,
color = "black", size = 4,alpha = 0.5) +coord_polar(start = 0) +theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Genre")
install.packages("cowplot")
plot_grid(g1, g2, labels = "AUTO")
library(cowplot)
plot_grid(g1, g2, labels = "AUTO")
g2 <- ggplot(lyrics_genre, aes(x = factor(1:12), y = count_genre)) +
geom_bar(stat = "identity", fill = alpha("purple", 0.7)) +
geom_text(data = lyrics_genre, aes(x = 1:12, y = count_genre + 10000, label = genre,
hjust = ifelse(angle2 < -90, 1, 0)),
angle = (ifelse(angle2 < -90, angle2 + 180, angle2) ), inherit.aes = FALSE,
color = "black", size = 4,alpha = 0.5) +coord_polar(start = 0) +theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank(),
panel.grid = element_blank()) + labs(title = "Number of Songs Per Genre")
plot_grid(g1, g2, labels = "AUTO")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library(qdap)
out_time <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_time.csv")
out_genre <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_genre.csv")
out <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
plot(out)
out <- read_csv("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
plot(out)
plot(out_genre)
plot(out_time)
out <- with(dt_lyrics[!is.na(dt_lyrics$time),], sentiment_by(stemmedwords, list(genre, time)))
# write.csv(out, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out.csv")
out_time <- with(dt_lyrics, sentiment_by(stemmedwords, list(time)))
# write.csv(out_time, file = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/output/sentiment_by_out_time.csv")
out_genre <- with(dt_lyrics, sentiment_by(stemmedwords, list(genre)))
# To properly run the plots, need to used the with sentiment_by output, reimporting the data will not work.
plot(out)
# To properly run the plots, need to used the with sentiment_by output, reimporting the data will not work.
plot(out)
plot(out_genre)
plot(out_time)
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time) %>% drop_na()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip()
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre)
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE) + coord_flip()
setwd("~/")
setwd("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs")
setwd("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs")
View(dt_lyrics)
dt_lyrics[91140,5]
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre)
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE) + coord_flip() + theme_light()
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time) %>% drop_na()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip() + theme_light()
?worldcloud2
# Load all the required libraries
packages.used <- c("tidyverse", "tidytext",
"plotly", "DT", "tm",
"data.table", "scales", "wordcloud2",
"gridExtra", "ngram", "shiny",
"topicmodels", "heatmaply","ggplot2","ggmosaic",
"rvest", "tibble", "qdap", "sentimentr", "syuzhet",
"factoextra", "beeswarm", "RColorBrewer", "RANN", "cowplot")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(topicmodels)
library(tidyverse)
library(tidytext)
library(heatmaply)
library(ggplot2)
library(ggmosaic)
library(rvest)
library(tibble)
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
# library(qdap)
library(sentimentr)
library(syuzhet)
library(factoextra)
library(beeswarm)
library(RColorBrewer)
library(RANN)
library(cowplot)
?worldcloud2
?wordcloud2
wordcloud2((filter(word_tibble, id %in% which(dt_lyrics$genre == input$genre1))),color='random-light',
backgroundColor='dark',size=5,
minRotation = pi/2,maxRotation =pi/2,
rotateRatio = 0.5)
wordcloud2((filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock"))),color='random-light',
backgroundColor='dark',size=5,
minRotation = pi/2,maxRotation =pi/2,
rotateRatio = 0.5)
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:input$nwords1) %>%
wordcloud2(size=0.6, rotateRatio=0.2)
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(size=0.6, rotateRatio=0.2)
wordcloud_rock
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=5, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=0.5, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
rock_img <- system.file("/Users/ran_lu/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/rock_guitar.png", package = "wordcloud2")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = rock_img)
rock_img
rock_img <- system.file("/Users/ran_lu/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png", package = "wordcloud2")
rock_img
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = rock_img)
rock_img
system.file("/Users/ran_lu/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png", package = "wordcloud2")
setwd("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs")
setwd("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs")
rock_img <- system.file("Rock_guitar.png", package = "wordcloud2")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = rock_img)
system.file("Rock_guitar.png", package = "wordcloud2")
rock_img <- system.file("Rock_guitar.png", package = "wordcloud2")
rock_img <- system.file("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png", package = "wordcloud2")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = rock_img)
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = system.file("~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png", package = "wordcloud2"))
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png")
wordcloud_rock
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png")
wordcloud_rock
count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = "~/Documents/Columbia/GR5243/Spring2020-Project1-RanRenaLu/figs/Rock_guitar.png")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5, figPath = "Rock_guitar.png")
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=2, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock
wordcloud_pop <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Pop")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_pop
wordcloud_pop <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Pop")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1.5, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_pop
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock
wordcloud_2000s <- count(filter(word_tibble, id %in% which(dt_lyrics$time == "2000s")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_2000s
wordcloud_2010s <- count(filter(word_tibble, id %in% which(dt_lyrics$time == "2010s")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_2010s
wordcloud_2000s
wordcloud_pop
wordcloud_2010s
wordcloud_rock
wordcloud_rock
wordcloud_pop
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color='random-light', backgroundColor='dark',size=1, minRotation = pi/2,maxRotation =pi/2, rotateRatio = 0.5)
wordcloud_rock
wordcloud_pop
wordcloud_rock
wordcloud_2010s <- count(filter(word_tibble, id %in% which(dt_lyrics$time == "1990s")), word, sort = TRUE) %>%
slice(1:50) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_2010s
wordcloud_pop <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Pop")), word, sort = TRUE) %>%
slice(1:80) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_pop
wordcloud_2000s <- count(filter(word_tibble, id %in% which(dt_lyrics$time == "2000s")), word, sort = TRUE) %>%
slice(1:80) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_2000s
wordcloud_2010s <- count(filter(word_tibble, id %in% which(dt_lyrics$time == "2010s")), word, sort = TRUE) %>%
slice(1:80) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_2010s
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:80) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_rock <- count(filter(word_tibble, id %in% which(dt_lyrics$genre == "Rock")), word, sort = TRUE) %>%
slice(1:80) %>%
wordcloud2(color="random-light", backgroundColor="dark", size=1, minRotation = pi/2, maxRotation = pi/2, rotateRatio = 0.5)
wordcloud_rock
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre)
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + guides(fill = FALSE) + coord_flip() + theme_light()
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time) %>% drop_na()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + guides(fill = FALSE) + coord_flip() + theme_light()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~time) + geom_col() + coord_flip() + theme_light()
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + coord_flip() + theme_light()
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre) %>% drop_na()
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + coord_flip() + theme_light()
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = -counts)) + facet_wrap(~genre) + geom_col() + coord_flip() + theme_light()
sentiment_counts <- lyrics_sentiment %>% group_by(genre) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -genre) %>% drop_na()
sentiment_counts%>% ggplot(aes(sentiments, counts, fill = counts)) + facet_wrap(~genre) + geom_col() + coord_flip() + theme_light()
sentiment_counts_time <- lyrics_sentiment %>% group_by(time) %>% summarise(anger_counts = sum(anger), anticipation_counts = sum(anticipation), disgust_counts = sum(disgust), fear_counts = sum(fear), joy_counts = sum(joy), sadness_counts = sum(sadness), surprise_counts = sum(surprise), trust_counts = sum(trust), negative_counts = sum(negative), positive_counts = sum(positive)) %>% gather(key = "sentiments", value = "counts", -time) %>% drop_na()
sentiment_counts_time%>% ggplot(aes(sentiments, counts, fill = counts)) + facet_wrap(~time) + geom_col() + coord_flip() + theme_light()
